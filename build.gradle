import java.text.SimpleDateFormat
import java.util.Date
import org.ajoberstar.grgit.Grgit
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
    }
}
plugins {
	id 'io.franzbecker.gradle-lombok' version '1.11'
    	id 'net.ltgt.apt' version '0.10'
    id 'org.ajoberstar.grgit' version '1.7.2'
}

version = '1.0'
def moduleName = "MySports"

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'io.franzbecker.gradle-lombok'
apply plugin: 'org.ajoberstar.grgit'


bootRepackage {
    mainClass = 'com.itt.Application'
}

jar {
    baseName = "${moduleName}"
    version =  "${version}"
}
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compileOnly 'org.projectlombok:lombok:1.16.18'
    apt "org.projectlombok:lombok:1.16.18"
    compile("org.springframework.boot:spring-boot-starter-data-mongodb:1.5.9.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-web:1.5.8.RELEASE")
    compile "io.springfox:springfox-swagger2:2.7.0"
    compile 'io.springfox:springfox-swagger-ui:2.7.0'
    compile 'org.mock-server:mockserver-netty:5.2.3'
    testCompile group: "de.flapdoodle.embed", name: "de.flapdoodle.embed.mongo", version: "2.0.0"
    testCompile group: "cz.jirutka.spring", name: "embedmongo-spring", version: "1.3.1"
    testCompile("org.springframework.boot:spring-boot-starter-test:1.5.8.RELEASE")
}


//Generates a new POM.xml for maven builds
task writeNewPom << {
    pom {
        project {
            groupId 'com.itt.jmtemplate'
            artifactId 'Cartos'
            version '1.0.0'
        
            inceptionYear '2017'
            licenses {
                license {
                    name 'InTimeTec License'
                    url 'http://www.intimetec.com'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}

task createDist{
	println "Current version:${version} buildDir:${buildDir}"
	copy{
 		into ("${projectDir}/dist/")
		from ("${projectDir}/config/application.properties")
	}
	copy{
 		into ("${projectDir}/dist/")
		from ("${projectDir}/keystore.p12")
	}
}
build {
       finalizedBy createDist
}

